// Code generated by avrogen. DO NOT EDIT.

package payment

import (
	"fmt"
	"strconv"

	"github.com/heetch/avro/avrotypegen"
)

type Payment struct {
	Transaction_id string  `json:"transaction_id"`
	User_id        string  `json:"user_id"`
	Amount         float64 `json:"amount"`
	Currency       string  `json:"currency"`
	Payment_method string  `json:"payment_method"`
	Timestamp int64  `json:"timestamp"`
	Status    Status `json:"status"`
}

// AvroRecord implements the avro.AvroRecord interface.
func (Payment) AvroRecord() avrotypegen.RecordInfo {
	return avrotypegen.RecordInfo{
		Schema: `{"fields":[{"name":"transaction_id","type":"string"},{"name":"user_id","type":"string"},{"name":"amount","type":"double"},{"name":"currency","type":"string"},{"name":"payment_method","type":"string"},{"logicalType":"timestamp-millis","name":"timestamp","type":"long"},{"name":"status","type":{"name":"Status","symbols":["INITIATED","PROCESSED","COMPLETED","FAILED"],"type":"enum"}}],"name":"com.payment.Payment","type":"record"}`,
		Required: []bool{
			0: true,
			1: true,
			2: true,
			3: true,
			4: true,
			5: true,
			6: true,
		},
	}
}

type Status int

const (
	StatusINITIATED Status = iota
	StatusPROCESSED
	StatusCOMPLETED
	StatusFAILED
)

var _Status_strings = []string{
	"INITIATED",
	"PROCESSED",
	"COMPLETED",
	"FAILED",
}

// String returns the textual representation of Status.
func (e Status) String() string {
	if e < 0 || int(e) >= len(_Status_strings) {
		return "Status(" + strconv.FormatInt(int64(e), 10) + ")"
	}
	return _Status_strings[e]
}

// MarshalText implements encoding.TextMarshaler
// by returning the textual representation of Status.
func (e Status) MarshalText() ([]byte, error) {
	if e < 0 || int(e) >= len(_Status_strings) {
		return nil, fmt.Errorf("Status value %d is out of bounds", e)
	}
	return []byte(_Status_strings[e]), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
// by expecting the textual representation of Status.
func (e *Status) UnmarshalText(data []byte) error {
	// Note for future: this could be more efficient.
	for i, s := range _Status_strings {
		if string(data) == s {
			*e = Status(i)
			return nil
		}
	}
	return fmt.Errorf("unknown value %q for Status", data)
}
