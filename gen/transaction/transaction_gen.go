// Code generated by avrogen. DO NOT EDIT.

package transaction

import (
	"fmt"
	"strconv"

	"github.com/heetch/avro/avrotypegen"
)

type PayPalTransaction struct {
	Transaction_id   string  `json:"transaction_id"`
	Payer_id         string  `json:"payer_id"`
	Receiver_id      string  `json:"receiver_id"`
	Amount           float64 `json:"amount"`
	Currency         string  `json:"currency"`
	Transaction_date int64  `json:"transaction_date"`
	Status           Status `json:"status"`
	Payment_method   string `json:"payment_method"`
	Note             *string `json:"note"`
}

// AvroRecord implements the avro.AvroRecord interface.
func (PayPalTransaction) AvroRecord() avrotypegen.RecordInfo {
	return avrotypegen.RecordInfo{
		Schema: `{"fields":[{"name":"transaction_id","type":"string"},{"name":"payer_id","type":"string"},{"name":"receiver_id","type":"string"},{"name":"amount","type":"double"},{"name":"currency","type":"string"},{"logicalType":"timestamp-millis","name":"transaction_date","type":"long"},{"name":"status","type":{"name":"Status","symbols":["INITIATED","COMPLETED","PENDING","FAILED"],"type":"enum"}},{"name":"payment_method","type":"string"},{"default":null,"name":"note","type":["null","string"]}],"name":"com.transaction.PayPalTransaction","type":"record"}`,
		Required: []bool{
			0: true,
			1: true,
			2: true,
			3: true,
			4: true,
			5: true,
			6: true,
			7: true,
		},
	}
}

type Status int

const (
	StatusINITIATED Status = iota
	StatusCOMPLETED
	StatusPENDING
	StatusFAILED
)

var _Status_strings = []string{
	"INITIATED",
	"COMPLETED",
	"PENDING",
	"FAILED",
}

// String returns the textual representation of Status.
func (e Status) String() string {
	if e < 0 || int(e) >= len(_Status_strings) {
		return "Status(" + strconv.FormatInt(int64(e), 10) + ")"
	}
	return _Status_strings[e]
}

// MarshalText implements encoding.TextMarshaler
// by returning the textual representation of Status.
func (e Status) MarshalText() ([]byte, error) {
	if e < 0 || int(e) >= len(_Status_strings) {
		return nil, fmt.Errorf("Status value %d is out of bounds", e)
	}
	return []byte(_Status_strings[e]), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
// by expecting the textual representation of Status.
func (e *Status) UnmarshalText(data []byte) error {
	// Note for future: this could be more efficient.
	for i, s := range _Status_strings {
		if string(data) == s {
			*e = Status(i)
			return nil
		}
	}
	return fmt.Errorf("unknown value %q for Status", data)
}
